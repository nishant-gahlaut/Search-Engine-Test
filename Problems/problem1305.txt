b"\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere are NN mountains in Chefland, arranged in a line and numbered 1 through N from left to right. For each valid i, the i-th mountain from the left has a height Hi.\nChef wants to choose a contiguous sequence of mountains l,l+1,\xe2\x80\xa6,r and visit them in this order. He has a notebook where he writes down some heights of mountains. Initially, the notebook contains only the integer 0 and each time he visits a new mountain whose height is strictly greater than all the integers written in the notebook so far, he writes its height in the notebook. The satisfaction Chef gets from travelling is the number of positive integers written in the notebook at the end. For example, if the mountains have heights (1_,5_,2,5,3,7_,2,9_), Chef's satisfaction is 4 and the integers written in the notebook at the end are 0,1,5,7,9.\nYour task is to answer Q queries. In each query, Chef gives you two integers L and R (1\xe2\x89\xa4L\xe2\x89\xa4R\xe2\x89\xa4N) and you should find the maximum satisfaction he can get if he can choose to visit any contiguous sequence of mountains from l to r such that L\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4R. Note that the queries are encoded in such a way that they have to be processed online.\nInput\n\nThe first line of each test case contains three space-separated integers N, Q and s.\nThe second line contains N space-separated integers H1,H2,\xe2\x80\xa6,HN.\nEach of the following Q lines contains two space-separated integers x and y describing a query. The parameters L and R for this query can be computed as follows:\nLet last be the answer to the previous query, or 0 if this is the first query in this test case.\nSet L to (x+s\xe2\x8b\x85last\xe2\x88\x921)%N+1.\nSet R to (y+s\xe2\x8b\x85last\xe2\x88\x921)%N+1.\nIf L>R, swap L and R.\n\nOutput\nFor each query, print a single line containing one integer \xe2\x80\x94 the maximum satisfaction Chef can get.\nConstraints\n\n1\xe2\x89\xa4N,Q\xe2\x89\xa4105\n0\xe2\x89\xa4s\xe2\x89\xa41\n1\xe2\x89\xa4Hi\xe2\x89\xa4105 for each valid i\n1\xe2\x89\xa4x,y\xe2\x89\xa4N\n\nSubtasks\nSubtask #1 (15 points): N\xe2\x89\xa41,000\nSubtask #2 (35 points): s=0, i.e. the queries do not have to be processed online\nSubtask #2 (50 points): original constraints\nExample Input 1\n6 3 0\n4 2 3 1 5 5\n1 6\n2 4\n3 4\n\nExample Output 1\n3\n2\n1\n\nExplanation\nIn the first query, Chef can choose to visit a contiguous subsequence of mountains with heights (4,2,3,1,5,5). The subsequence that gives the maximum satisfaction is (2,3,1,5). In that case, Chef writes the integers 0,2,3,5 to his notebook, so the answer is 3.\nIn the second query, Chef can choose to visit a contiguous subsequence of mountains with heights (2,3,1). The whole sequence has the maximum satisfaction 2, since Chef writes the integers 0,2,3.\nIn the third query, the largest (and the only possible) satisfaction is 1, since Chef writes either 0,3 or 0,1.\nExample Input 2\n10 10 1\n7 8 8 9 10 10 2 3 5 10\n9 6\n2 9\n10 6\n4 2\n5 10\n4 5\n8 7\n8 2\n7 7\n9 5\n\nExample Output 2\n3\n3\n3\n1\n4\n2\n2\n4\n1\n4\n\n\n\n\nAuthor:\n5\xe2\x98\x85dalgerok\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/UNSQUERS\n\n\nTags:\n\n               \n                 Persistent Segment Trees, Lazy Propagation\n                 \n                     \n                     Advanced Data Structures, Persistent Structures, Advanced Tree Structures, Segment Trees\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2520\n\n\nDate Added:\n18-10-2020\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"