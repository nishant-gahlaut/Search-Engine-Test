b'\nGenetic engineering is fun. The scientists have gathered several DNAs and want to create something new out of those. Each DNAs can be represented as a sequence of bases A, G, T, C. Let DNA[a..b] be the subsequence of DNA starting from index a finishing in b inclusive, and DNA[a..] be the subsequence of DNA starting from index a to the end. Scientist can perform the following operations on the DNAs:\n\ncross operation \xe2\x80\x93 they take DNA1 and DNA2 and numbers k1 and k2. Then two new DNAs are created: DNA3 = DNA1[1..k1]+DNA2[k2+1..] and DNA4 = DNA2[1..k2]+DNA1[k1+1..].\nmutate operation \xe2\x80\x93 they take a DNA, number k and one of the bases. Then they replace the base in position k in DNA with that base.\nalso they need to know certain characteristics of those DNAs. So they can perform count operation \xe2\x80\x93 they take DNA and numbers k1 and k2 (k1 <= k2). This operation should return the number of A, G, T, C bases in DNA[k1..k2].\n\nThe initial DNAs are numbered from 1 to n, where n is the amount of those DNAs. The new DNAs created in the cross operations are numbered with consecutive integers. You are to write a program to help scientists perform those operations.\nInput\nThe first line of input file contains number n \xe2\x80\x93 the amount of initial DNAs. Each of the following n lines contains the description of each DNA. The next line contains number q \xe2\x80\x93 the amount of operations to perform. The next q lines contain the description of each operation in the following form:\n\nCROSS id1 id2 k1 k2\nMUTATE id k m\nCOUNT id k1 k2\n\nConstraints\n1 <= n <= 20\n1 <= q <= 30000\nThe length of each initial DNA does not exceed 30000. The length of any DNA formed in cross operation won\xe2\x80\x99t exceed 2000000000. Total amount of different DNAs won\xe2\x80\x99t exceed 10000. It is guaranteed that all operations are correct.\n\n\nOutput\nFor each count operation print four integers: the number of each of the bases in the given subsequence of the given DNA.\n\nExample\nInput:\n2\nCTCGC\nTGCGG\n5\nMUTATE 1 2 A\nCOUNT 2 2 4\nMUTATE 2 1 G\nCROSS 2 1 1 5\nCOUNT 4 3 6\n\nOutput:\n0 2 0 1\n0 2 0 2\n\n\n\n\n\nAuthor:\n2\xe2\x98\x85ivan_adm\n\n\nTester:\n5\xe2\x98\x85innocentboy\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/GENETICS\n\n\nTags:\n\n               \n                 Treap\n                 \n                     \n                     Advanced Data Structures\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2301\n\n\nDate Added:\n9-04-2010\n\n\nTime Limit:\n0.4485 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'