b'\nYou are initially given a collection of N distinct strings. The ith string in the order of input, is assigned index i. (i.e. the first string is assigned index 1, second string is assigned index 2, \xe2\x80\xa6, the Nth string is assigned index N). \nYou have to process Q queries.\nEach query can be of one of three types:\n\n1 x c\nInsert a new string into the collection, which is equal to the concatenation of string at index x and the character c. This new string is assigned index p+1, where p is the number of strings in the collection before this query. It is guaranteed that this new string does not already exist in the collection before this query.\n2\nPrint the index of the lexicographically minimal string in the collection, which is NOT a proper prefix of any other string in the collection.\n3\nPrint the index of the lexicographically maximal string in the collection, which is NOT a proper prefix of any other string in the collection.\n\nAll the initial strings, as well as the characters in the queries of first type, consist of lowercase English alphabets only.\nInput Format:\nFirst line contains a single integer T, the number of testcases. Then for each testcase,\n\nFirst line contains a single integer N, the initial number of strings in the collection.\nN lines follow. The ith line contains the string with index i (1\xe2\x89\xa4i\xe2\x89\xa4N).\nThe next line contains a single integer Q, number of queries.\nQ lines follow, each containing a query of one of the three types described above. \n\nOutput Format:\nFor each query of type 2 and 3, output a single line containing a single integer - the answer to the query.\nConstraints:\n\n1\xe2\x89\xa4T\xe2\x89\xa45\n1\xe2\x89\xa4N\xe2\x89\xa4104\n1\xe2\x89\xa4Q\xe2\x89\xa42\xe2\x88\x97105\nThe initial N strings are all distinct.\nSum of lengths of all initial strings across all testcases does not exceed 2\xe2\x88\x97105.\nSum of number of queries across all testcases does not exceed 2\xe2\x88\x97105.\nFor each query of type 1, index x is such that 1\xe2\x89\xa4x\xe2\x89\xa4p, where p is the number of strings in the collection before that query.\nIt is guaranteed that there will be at least one query of type 2 or 3 in each testcase. \n\nSample Input:\n1\n3\nabcdef\nabc\nxyz\n6\n1 2 d\n2\n3\n1 4 c\n2\n3  \nSample Output:\n1\n3\n5\n3  \nExplanation:\nBefore the first query, the collection is {"abcdef", "abc", "xyz"}. String with index 2 is "abc". So we form a new string ("abc"+"d" = "abcd"), and since there were 3 strings before, we assign it index 4. Now collection is {"abcdef", "abc", "xyz", "abcd"}.\nThe desired string for the second query is "abcdef", which has an index of 1, so we output 1. Note that "abc" or "abcd" cannot be the answers since they are proper prefixes of another string in the collection ("abcdef").\nThe desired string for the third query is "xyz", having index 3, so we output 3.\nIn the 4th query, we have to add a new string to the collection which is: string at index 4 + "c" = "abcd"+"c"= "abcdc". Now collection is {"abcdef", "abc", "xyz", "abcd", "abcdc"}.\nFor the 5th query, "abcdc" is the lexicographically minimum string and it has index 5, so we output 5.\nFor the last query, again the desired string is "xyz", having index 3, so we output 3.  \n\n\n\nAuthor:\n5\xe2\x98\x85dj_r_1\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MINMXSTR\n\n\nTags:\n\n               \n                 Tries, Binary lifting\n                 \n                     \n                     Advanced Data Structures, Algorithms, Graph Algos, Lowest Common Ancestor\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n18-06-2020\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'