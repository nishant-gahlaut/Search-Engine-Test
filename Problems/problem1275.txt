b'\nLong long ago, there is a magic board. The magic board has N*N cells: N rows and N columns. Every cell contains one integer, which is 0 initially. Let the rows and the columns be numbered from 1 to N.\n\nThere are 2 types of operations can be applied to the magic board:\nRowSet i x: it means that all integers in the cells on row i have been changed to x after this operation.\nColSet i x: it means that all integers in the cells on column i have been changed to x after this operation.\nAnd your girlfriend sometimes has an interest in the total number of the integers 0s on some row or column.\nRowQuery i: it means that you should answer the total number of 0s on row i.\nColQuery i: it means that you should answer the total number of 0s on column i.\nInput\nThe first line of input contains 2 space-separated integers N and Q. They indicate the size of the magic board, and the total number of operations and queries from the girlfriend.\nThen each of the next Q lines contains an operation or a query by the format mentioned above.\n\nOutput\nFor each query, output the answer of the query.\n\nConstraints\n1 \xe2\x89\xa4 N, Q \xe2\x89\xa4 500000 (5 * 105)1 \xe2\x89\xa4 i \xe2\x89\xa4 Nx \xe2\x88\x88 {0, 1} (That is, x = 0 or 1)\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3 6\nRowQuery 1\nColSet 1 1\nRowQuery 1\nColQuery 1\nRowSet 1 0\nColQuery 1\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n3\n2\n0\n1\n\n\nExplanation\n\nAt first, the magic board is\n000 <- row 1\n000\n000\n\nSo the answer of first query "RowQuery 1" is 3.\n\n\nAfter the "ColSet 1 1", the board becomes\ncolumn 1\n|\nV\n100\n100\n100\n\nSo the answer of the second query "RowQuery 1" is clearly 2, since the cell (1,1) became 1. And the answer of the third query "ColQuery 1" is 0.\n\n\nFinally, apply the operation "RowSet 1 0", the board has changed to\n000\n100\n100\n\nFrom this board, the answer of the last query "ColQuery 1" should be 1.\n                \n            \n        \n\n        \n\n\nAuthor:\njingbo_adm\n\n\nTester:\n6\xe2\x98\x85laycurse\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MBOARD\n\n\nTags:\n\n               \n                 Sets, Treap, Segment Trees, Fenwick Trees\n                 \n                     \n                     Data Structures, Advanced Data Structures, Advanced Tree Structures\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2197\n\n\nDate Added:\n15-10-2012\n\n\nTime Limit:\n0.6 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, ST, NEM\n\n\n\n\n\nSubmit\n\n'