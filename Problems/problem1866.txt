b'\n Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has created a special dividing machine that supports the below given operations on an array of positive integers.\nThere are two operations that Chef implemented on the machine.\n\nType 0 Operation\n\n\nUpdate(L,R):\n\tfor i = L to R:\n\t\ta[i] = a[i] / LeastPrimeDivisor(a[i])\n\n\n\nType 1 Operation\n\n\nGet(L,R):\n\tresult = 1\n\tfor i = L to R:\n\t\tresult = max(result, LeastPrimeDivisor(a[i]))\n\treturn result;\n\n\nThe function LeastPrimeDivisor(x) finds the smallest prime divisor of a number. If the number does not have any prime divisors, then it returns 1.\nChef has provided you an array of size N, on which you have to apply M operations using the special machine. Each operation will be one of the above given two types. Your task is to implement the special dividing machine operations designed by Chef. Chef finds this task quite easy using his machine, do you too?\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each test case contains two space-separated integers N, M, denoting the size of array A and the number of queries correspondingly.\nThe second line of each test case contains N space-separated integers A1, A2, ..., AN denoting the initial array for dividing machine.\nEach of following M lines contain three space-separated integers  type, L, R - the type of operation (0 - Update operation, 1 - Get operation), and the arguments of function, respectively\nOutput\nFor each test case, output answer of each query of type 1 (Get query) separated by space. Each test case from the same file should start from the new line.\nConstraints\n1 \xe2\x89\xa4 T \xe2\x89\xa4 100\n1 \xe2\x89\xa4 Ai \xe2\x89\xa4 106\n1 \xe2\x89\xa4 L \xe2\x89\xa4 R \xe2\x89\xa4 N\n0 \xe2\x89\xa4 type \xe2\x89\xa4 1\n Sum of M over all test cases in a single test file does not exceed 106\nSubtasks\nSubtask #1: (10 points) \n1 \xe2\x89\xa4 N, M \xe2\x89\xa4 103\nSubtask #2: (25 points)\n1 \xe2\x89\xa4 N, M \xe2\x89\xa4 105\n Ai is a prime number. \nSubtask #3: (65 points)\n1 \xe2\x89\xa4 N, M \xe2\x89\xa4 105\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n2\n6 7\n2 5 8 10 3 44\n1 2 6\n0 2 3\n1 2 6\n0 4 6\n1 1 6\n0 1 6\n1 4 6\n2 2\n1 3\n0 2 2\n1 1 2\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n5 3 5 11\n1\n\n\nExplanation\nExample case 1.The states of array A after each Update-operation:\nA: = [2 1 4 10 3 44]\nA: = [2 1 4 5 1 22]\nA: = [1 1 2 1 1 11]\n\n\n\nAuthor:\n5\xe2\x98\x85kaizer\n\n\nTester:\n5\xe2\x98\x85dpraveen\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/DIVMAC\n\n\nTags:\n\n               \n                 Lazy Propagation, Prime Divisors\n                 \n                     \n                     Advanced Data Structures, Advanced Tree Structures, Segment Trees, Mathematics, Number Theory, Integer Factorisation, Divisors\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2069\n\n\nDate Added:\n5-07-2015\n\n\nTime Limit:\n1 - 3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'