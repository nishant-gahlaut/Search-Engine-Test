b'\nChef has decided to start home delivery from his restaurant. He hopes that he will get a lot of orders for delivery, however there is a concern. He doesn\'t have enough work forces for all the deliveries.  For this he has came up with an idea - he will group together all those orders which have to be delivered in nearby areas. \nIn particular, he has identified certain bidirectional roads which he calls as fast roads. They are short and usually traffic free, so the fast travel is possible along these roads. His plan is that he will send orders to locations A and B together if and only if it is possible to travel between A and B using only fast roads. Your task is, given the configuration of fast roads, identify which orders are to be sent together.\n\nInput\nFirst line of input contains an integer T, the number of test cases. Then T test cases follow. First line of each test case contains two space separated integers N and M, denoting number of locations and the number of fast roads. Then M lines follow each containing two space separated integers A and B, denoting that there is a fast road between locations A and B. Assume that locations are indexed by numbers from 0 to N-1. \n\nNext line contains an integer Q denoting the number of queries. Each of the next Q lines contain two integers X and Y. For each query you have to find out if orders meant for locations X and Y are to be sent together or not.\n\nNote that there might be multiple fast roads between same pair of locations, also there might be a fast road that links a location to itself.\n\nOutput\nFor each test case print Q lines - one for each query. Output "YO" if the orders are to be \ndelivered together and "NO" otherwise (quotes for clarity).\n\nConstraints\n1 \xe2\x89\xa4 T \xe2\x89\xa4 100\n1 \xe2\x89\xa4 N \xe2\x89\xa4 100\n1 \xe2\x89\xa4 M \xe2\x89\xa4 1000\n0 \xe2\x89\xa4 A, B, X, Y \xe2\x89\xa4 N-1\n1 \xe2\x89\xa4 Q \xe2\x89\xa4 3000\n\nWarning!\nThere are large input and output files in this problem. Make sure you use fast enough I/O methods.\n\n                        Sample Input 1\n                        \n\n\n\n\n\n1\n4 2\n0 1\n1 2\n3\n0 2\n0 3\n2 1\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\nYO\nNO\nYO\n\n\n\n\n\nAuthor:\n2\xe2\x98\x85nikhil_adm\n\n\nTester:\n6\xe2\x98\x85anton_lunyov\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/HDELIVER\n\n\nTags:\n\n               \n                 Connected Components, DFS\n                 \n                     \n                     Advanced Algorithms, Advanced Graph Algos, Algorithms, Graph Algos, Traversals\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n1621\n\n\nDate Added:\n18-01-2012\n\n\nTime Limit:\n0.48995 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'