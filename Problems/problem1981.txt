b"\nYou are given two sets of vertexes U = {U[1], U[2], ..., U[N]} and V = {V[1], V[2], ..., V[M]}. All N + M vertexes here are different. You are also given the matrix P of size N x M composed of real numbers from the segment [0, 1]. The number that stands at the intersection of the ith row and the jth column of this matrix is denoted by P[i][j] and means the probability that the vertexes U[i] and V[j] are connected by the bidirected edge. In other words, you are given a complete bipartite graph where each edge occurs with some probability. Your task is to find the expected size of the maximum matching of this graph.\nWhat exactly does it mean?\nLet's call our complete bipartite graph with random edges as random bipartite graph.\nConsider some arbitrary bipartite graph G = (U, V, E). Denote by P(G) the probability that our random bipartite graph is equal to G. How to calculate P(G)? Consider some pair of vertexes (U[i], V[j]). If these vertexes are connected by the edge in G then put PG[i][j] = P[i][j] otherwise put PG[i][j] = 1 \xe2\x80\x93 P[i][j]. Then P(G) is equal to the product of PG[i][j] for all N \xe2\x88\x99 M pairs of (i, j), where 1 \xe2\x89\xa4 i \xe2\x89\xa4 N and 1 \xe2\x89\xa4 j \xe2\x89\xa4 M.\nNext, denote by MM(G) the size of the maximum matching in the graph G. In other words, MM(G) is the size of the largest set of edges of G such that no two edges share a common vertex. \nFinally, the expected size of the maximum matching is the sum of products P(G) \xe2\x88\x99 MM(G) for all possible bipartite graphs G with parts U and V. Note that there are 2 N \xe2\x88\x99 M  such graphs in all. So don't try to calculate the answer directly by definition if you do not want to get verdict Time Limit Exceeded ;)\nInput\nThe first line of the input file contains two integers N and M. Each of the following N lines contains M real numbers. jth number in the ith line of these N lines denotes P[i][j], the probability that the vertexes U[i] and V[j] are connected by the direct edge. Each pair of consecutive numbers in every line is separated by exactly one space.\n\nOutput\nIn the only line of the output file print the expected size of the maximum matching. Your answer will be considered as correct if it has an absolute error less than 10-6.\nConstraints\n1 \xe2\x89\xa4 N \xe2\x89\xa4 5\n1 \xe2\x89\xa4 M \xe2\x89\xa4 100\n0 \xe2\x89\xa4 P[i][j] \xe2\x89\xa4 1\nP[i][j] will have exactly 5 digits after the decimal point\nExample\nInput 1:\n3 3\n0.38064 0.30000 0.29486\n0.41715 0.90000 0.67837\n0.53316 1.00000 1.00000\n\nOutput 1:\n2.575940\n\n\nInput 2:\n2 2\n0.40000 1.00000\n0.10000 1.00000\n\nOutput 2:\n1.46\n\nExplanation\nIn the second example we have four different graphs with non-zero value of P(G). Their adjacent matrices with marked maximum matching as well as the values of MM(G) and P(G) are listed in the table below.\n\n\nAdjacent matrix\nMM(G)\nP(G)\n\n\n\n\n01\n01\n\n\n1\n(1 \xe2\x80\x93 0.4) \xe2\x88\x99 (1 \xe2\x80\x93 0.1) = 0.6 \xe2\x88\x99 0.9 = 0.54\n\n\n\n\n11\n01\n\n\n2\n0.4 \xe2\x88\x99 (1 \xe2\x80\x93 0.1) = 0.4 \xe2\x88\x99 0.9 = 0.36\n\n\n\n\n01\n11\n\n\n2\n(1 \xe2\x80\x93 0.4) \xe2\x88\x99 0.1 = 0.6 \xe2\x88\x99 0.1 = 0.06\n\n\n\n\n11\n11\n\n\n2\n0.4 \xe2\x88\x99 0.1 = 0.04\n\n\nSo the answer is 0.54 \xe2\x88\x99 1 + 0.36 \xe2\x88\x99 2 + 0.06 \xe2\x88\x99 2 + 0.04 \xe2\x88\x99 2 = 1.46.\n\n\n\nAuthor:\njingbo_adm\n\n\nTester:\n6\xe2\x98\x85anton_lunyov\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MATCH\n\n\nTags:\n\n               \n                 Maximum Bipartite Matching, Expected Value, Dynamic Programming, Bipartite\n                 \n                     \n                     Advanced Algorithms, Advanced Graph Algos, Flow Networks, Mathematics, Probability, Algorithms, Graph Algos, Coloring\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2801\n\n\nDate Added:\n29-03-2012\n\n\nTime Limit:\n0.6 - 0.662602 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"