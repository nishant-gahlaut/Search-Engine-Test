b"\n Read problems statements in Mandarin Chinese  and Russian.\nEarthquake in Bytetown! Situation is getting out of control!\nAll buildings in Bytetown stand on straight line. The buildings are numbered 0, 1, ..., N\xe2\x88\x921 from left to right.\nEvery hour one shake occurs. Each shake has 3 parameters: the leftmost building that was damaged during this shake, the corresponding rightmost building, and the force of the shake. Each time all the buildings in the disaster area are damaged equally. Let's consider this process in details.\nAt any moment every building has the number that indicates its height (may have leading zeroes). This number corresponds to some string consisting of digits. When some shake affects to the building its string circularly rotates to the left by the value of the force of the shake and its height corresponds to the value of new string. Pay attention that after rotation string may have leading zeroes. For instance: a building with height 950 got in disaster area with force 2, Then its string become 095, so height in reality is 95. If it was one more shake with force 1, then its height would become 950 again.\nMajor of Bytetown got some ideas how to protect residents, so sometimes he needs such kind of stats: find height of the highest building on some interval. You are given information about all the heights before the very first shake and then you get queries of two types: \n\nType 0, described by 0 Li Ri Fi: Shake occurred on interval [Li, Ri] with force Fi.\nType 1, described by 1 Li Ri: The major wants to know the biggest height on interval [Li, Ri].\n\nHere, of course, the interval [L, R] contains all the building k such that L \xe2\x89\xa4 k \xe2\x89\xa4 R.\nYou want to get a promotion and promised to complete this task. Now it's time to do it!\nInput\nEach test file contains only one test case.\n The first line of input contains an integer N denoting the number of buildings in Bytetown. The second line contains N space-separated integers A0, A1, ..., AN\xe2\x88\x921 denoting the initial height of the buildings. The third line contains an integer M denoting the number of queries. Each of next M lines starts with 0 or 1, where 0 denotes a query Type 0 and 1 denotes a Type 1 query. If it's a Type 0 query then 3 integers follows Li, Ri, Fi, denoting number of the leftmost building, number of the rightmost building and force of this shake. If  it's a Type 1 query then 2 integers follows Li, Ri, denoting numbers of the leftmost building and the rightmost building of necessary segment.\nOutput\nFor each Type 1 query, output an integer denoting the answer for the query without leading zeroes.\nConstraints\n\n1 \xe2\x89\xa4 N \xe2\x89\xa4 800000 = 8 \xc3\x97 105\n1 \xe2\x89\xa4 M \xe2\x89\xa4 200000 = 2 \xc3\x97 105\n0 \xe2\x89\xa4 Ai < 10000 = 104\n0 \xe2\x89\xa4 Li \xe2\x89\xa4 Ri < N\n0 \xe2\x89\xa4  Fi \xe2\x89\xa4 60\nAi does not have leading zeroes\n\nExample\nInput:\n3\n17 3140 832\n8\n1 0 2\n0 0 2 1\n1 1 2\n1 0 0\n0 0 2 2\n1 0 2\n0 1 1 1\n1 0 2\nOutput:\n3140\n1403\n71\n832\n3140\n\nExplanation\nThe initial array: [17, 3140, 832].\nThe first query is a Type 1 query with numbers of buildings 0 and 2, so the answer is the maximum of the array: 3140.\nThe second query is a Type 0 query with numbers of buildings 0 and 2, and force 1, so the array turns to: [71, 1403, 328].\nThe third query is a Type 1 query again with numbers of buildings 1 and 2, so the answer is the maximum of 1403 and 328: 1403\n\n\n\nAuthor:\n4\xe2\x98\x85pavel1996\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/EQUAKE\n\n\nTags:\n\n               \n                 Segment Trees, Lazy Propagation\n                 \n                     \n                     Advanced Data Structures, Advanced Tree Structures\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2409\n\n\nDate Added:\n27-06-2014\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"