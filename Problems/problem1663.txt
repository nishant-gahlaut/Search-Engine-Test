b'\n Read problems statements in Mandarin Chinese  and Russian.\nSereja and Arrays\xc2\xa0\nSereja have an array that consist of n integers a[1], a[2], ..., a[n]. Also Sereja have an array that consist of m integers b[1], b[2], ..., b[m]. Sereja make next operations:\n\xc2\xa0\n- random_shuffle(b) \xe2\x80\x94 shuffle elements of b\n\xc2\xa0\n- random_merge(a,\xe2\x80\x89b) \xe2\x80\x94 merge array a and b to array a. From all possible merges Sereja chooses a random one. For better understanding you can imagine, that merged array is sequence q of n+m elements, each element if either zero or one. It contains exactly n zeroes and m ones. Then zeroes are replaced with elements of a, and ones are replaced with elements of b (without changing their relative order inside initial sequences).\n\xc2\xa0\nNow Sereja want to know expected number of inversions in array a after described operations. Inversion is a pair (i,\xe2\x80\x89j) (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89i\xe2\x80\x89<\xe2\x80\x89j\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89n\xe2\x80\x89+\xe2\x80\x89m) such that a[i]\xe2\x80\x89>\xe2\x80\x89a[j].\nInput\nFirst line contain number T \xe2\x80\x94 number of testcases. T tests follow. First line of each testcase contain two integers n and m. Next line contain n integers a[1], a[2], ..., a[n]. Next line contain m integers b[1], b[2], ..., b[m].\n\nOutput\nFor each testcase print expected number of inversions.\n\xc2\xa0\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 7\n1 \xe2\x89\xa4 n,m \xe2\x89\xa4 10^5\n1 \xe2\x89\xa4 a[i], b[i] \xe2\x89\xa4 10^5\n\n\xc2\xa0\nExample\nInput:\n2\n5 3\n1 5 4 3 2\n2 6 3\n10 9\n10 3 6 4 8 4 1 9 7 2\n9 8 3 3 10 8 2 9 2\nOutput:\n13.833333333\n87.818181818\n\xc2\xa0\nNote\nTest #0-1 (25 points): n,m \xe2\x89\xa4 10  \nTest #2 (25 points): n,m \xe2\x89\xa4 1000  \nTest #3-4 (50 points): n,m \xe2\x89\xa4 100000  \n\n\n\nAuthor:\nsereja_adm\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/LFEB14A\n\n\nTags:\n\n               \n                 Segment Trees, Fenwick Trees, Expected Value\n                 \n                     \n                     Advanced Data Structures, Advanced Tree Structures, Mathematics, Probability\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2517\n\n\nDate Added:\n9-02-2014\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'