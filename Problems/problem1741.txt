b'\nThere are KK travellers who want to travel through a country one after the other. The country is in the form of a 2-d grid and is divided into N rows and M columns, such that each cell of the grid can be considered to be a city. \nEach city is initially marked with either 0 or 1. Let city (i,j) (the city at the intersection of the ith row and jth column) be marked with number Cij. If a traveller is in the city (i,j), then \n\nIf Cij=0 and j<M, then the traveller moves to city (i,j+1) and at the same time Cij is changed to 1.\nIf Cij=1 and i<N, then the traveller moves to city (i+1,j) and at the same time Cij is changed to 0.\n\nIf the traveller cannot make a move from a city (i,j), then this city is considered to be the destination of that traveller. Note that the marking (Cij) of the destination cell is unchanged \xe2\x80\x94 please see the third sample test for an explained example.\nEach traveller starts their journey from city (1,1), and all travellers (apart from the first) start their journey only once the previous one has reached their destination. Find the destination city of the K-th traveller.\nInput Format\n\nThe first line of input contains a single integer T, denoting the number of testcases. The description of T test cases follows.\nThe first line of each testcase contains three space-separated integers N,M, and K \xe2\x80\x94 the number of rows, number of columns, and number of travellers, respectively.\nThe following N lines each contain a binary string of length M, such that j-th character of the i-th string denotes the initial marking of city (i,j), Cij.\n\nOutput Format\nFor each testcase, output in a single line two space-separated integers x and y, where city (x,y) is the destination city of the K-th traveller.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa41000\n2\xe2\x89\xa4N,M\xe2\x89\xa4105\nN\xe2\x8b\x85M\xe2\x89\xa44\xe2\x8b\x85105\n1\xe2\x89\xa4K\xe2\x89\xa4109\nSum of N\xe2\x8b\x85M over all tescases does not exceed 4\xe2\x8b\x85105.\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n2 2 1\n10\n01\n2 2 1\n10\n10\n2 2 2\n11\n10\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n2 2\n2 1\n2 2\n\n\nExplanation\nTest case 1: The first (and only) traveller moves along the following path: (1,1)\xe2\x86\x92(2,1)\xe2\x86\x92(2,2).\nTest case 2: The traveller moves along the following path: (1,1)\xe2\x86\x92(2,1). Note that no move can be made from (2,1) by the first traveller.\nTest case 3: The first traveller moves along the path (1,1)\xe2\x86\x92(2,1). After this, the state of city (1,1) changes to 0 while the states of the other cities remain unchanged.\nThe second traveller then moves along the path (1,1)\xe2\x86\x92(1,2)\xe2\x86\x92(2,2).\n\n\n\nAuthor:\n6\xe2\x98\x85inov_360\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/XORTRV\n\n\nTags:\n\n               \n                 dynamic-programming, inov_360, medium, start31\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3096\n\n\nDate Added:\n19-03-2022\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'