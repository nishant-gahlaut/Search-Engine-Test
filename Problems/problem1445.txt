b"\n Read problems statements in Mandarin Chinese and Russian as well.\n\nYou are given an array A consisting of N non-negative integers. The elements of array A are indexed with integers 1, 2, 3, ..., N. You need to implement a data structure, which can process the following queries efficiently:\n\n\n\n1 L R: find the minimal number in the subarray A[L..R] and count how many times it appears there;\n\t\t2 L R K: replace each number Ai with the expression (Ai xor K) for the subarray A[L..R]. \n\t\n\nYou can read about XOR-operation here: http://en.wikipedia.org/wiki/Exclusive_or\nInput\n \nThe first line of the input contains two integers N and Q, denoting the size of A and the number of the queries to process. The second line contains N non-negative integers, denoting array A.\nThe next Q lines contain the queries to process, each contains one query. The format of queries is the same with the one described in the legend.\nOutput\nYour output should contain exactly Q1 lines, where Q1 is the number of the queries of the first type in the input.\nFor each query of the first type you need to output two numbers: the minimal number in the subarray A[L..R] and the number of times it appears there. You should output the answers for the queries in the order they appear in the input.\nConstraints\n\n1 \xe2\x89\xa4 N \xe2\x89\xa4 250 000;\nThe number of the queries of the first type won't exceed 40000;\nThe number of the queries of the second type won't exceed 10000;\n0 \xe2\x89\xa4 Ai < 65536;\n0 \xe2\x89\xa4 K < 65536, for each query of the second type appeared in the input;\n1 \xe2\x89\xa4 L \xe2\x89\xa4 R \xe2\x89\xa4 N, for each query appeared in the input.\n\n\xc2\xa0\nExample\nInput:\n5 3 \n0 1 0 1 0 \n1 1 5 \n2 1 5 1 \n1 1 5\n\nOutput:\n0 3 \n0 2\n\n \nExplanation\n\nInitially A[] = {0, 1, 0, 1, 0}.\n\n\nAfter the second query A[] = {1, 0, 1, 0, 1}.\n\n\n\n\nAuthor:\n6\xe2\x98\x85kostya_by\n\n\nTester:\n6\xe2\x98\x85gerald\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MINXOR\n\n\nTags:\n\n               \n                 Tries with XOR, Square Root Decomposition, Range Minimum Queries\n                 \n                     \n                     Advanced Data Structures, Tries, Advanced Algorithms, Algorithms, Queries\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2941\n\n\nDate Added:\n8-02-2014\n\n\nTime Limit:\n7 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"