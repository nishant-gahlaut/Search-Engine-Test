b'\nShort circuit evaluation of Boolean expressions denotes the semantic in which the second argument of some Boolean operator is not evaluated if the value \n\nof the first argument is enough to have the result. This technique is used in many programming languages to optimize the evaluation of Boolean expressions. \n\nSpecifically for "A and B", if A is false we know that the whole expression is false and we don\'t need to evaluate B. For "A or B", if A is true we know the \n\nresult to be true. Now having that those Boolean operations are commutative we may actually evaluate B first and not evaluate A in case B gives us the \n\nresult. Moving the idea further if we have "A1 or A2 or...or An" we can evaluate the variables in any order and as soon as we have one of them as true we \n\nknow that the whole expression is true. We can do similarly for and operation. Now let\'s consider some complex Boolean expression. We will fix the order in \n\nwhich we will evaluate the variables of the expression. Then we evaluate those variables in that order and we won\'t evaluate the variables that give us no \n\nnew information about the value of the whole expression in the process. For example, assume we have "A and B or C" and we fix the order of evaluation B, A, \n\nC. First we evaluate B, if it\'s false we don\'t have to evaluate A and only evaluate C. However if B is true we will need to evaluate A. If A is true we know \n\nthe expression is true and won\'t evaluate C, otherwise we evaluate C to have the value of the expression. Now your task is having some complex Boolean \n\nexpression containing and, or, not operations and for each variable having the probability that this variable is true, you need to find the order of \n\nevaluation for which the expected number of evaluations in the process described above will be minimal.\n\nInput\nThe first line of input file contains number t - the amount of test cases. Then t test cases follow. The first line of each test case will contain the \n\nBoolean expression. The expression will be valid and will consist of and, or, not operations, brackets and variable names. All the variable names in one \n\nexpression will be distinct. Then for each variable present in the expression there will be a line in the input in the format s p, where s - the name of the \n\nvariable and p - is the probability that the variable will be true. The names of the variables will consist of small Latin letters only.\n\nConstraints\n1 <= t <= 50\n0 < p < 1 \nThe length of the expression won\'t exceed 30000 characters.\nThere will be no more than 1000 variable in the expression.\nThe length of the variable names won\'t exceed 5 characters.\nAlso the expression will be in the form of either conjunctive or disjunctive normal form.\nOutput\nFor each test case output the expected number of evaluations for the optimal order of evaluation of variables for short circuit evaluation process \n\ndescribed above. Output the answer with 6 digits after the dot.\n\nExample\nInput:\n3\n(a and b) or c\na 0.3\nb 0.4\nc 0.5\n(a or b) and (not d or c)\na 0.5\nb 0.3\nc 0.8\nd 0.25\nab or bc or cd\nab 0.3\nbc 0.1\ncd 0.2\n\nOutput:\n1.650000\n2.280000\n2.260000\n\n\nExplanation\nIn the first test case the best order is c, a, b.\n\n\n\nAuthor:\n2\xe2\x98\x85ivan_adm\n\n\nTester:\n1\xe2\x98\x85gamabunta\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/SHORTCIR\n\n\nTags:\n\n               \n                 aug11, hard, ivan_adm\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2410\n\n\nDate Added:\n9-07-2011\n\n\nTime Limit:\n0.269896 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'