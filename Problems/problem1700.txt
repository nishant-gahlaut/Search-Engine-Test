b'\n\nHermione has come home for the holidays after a grueling first year at Hogwarts. She then picks up a Muggle book on "Graph Theory" and starts reading about rooted K-ary trees: Trees that are rooted and in which each node has at most K children. Since Transfiguration is her favorite subject at Hogwarts, she excitedly starts inventing a spell to Transfigure some such trees into others.\n\n\nAfter a while, she has succeeded in her spell. However, she notices something strange about the transfigured tree. Suppose she started with the tree T, and transfigured it into tree T\'. Then, she found that the preorder traversal of T was the same as the preorder traversal of T\', and that the postorder traversal of T was also the same as the postorder traversal of T\'.\n\n\nShe then realizes that her spell is capable of transfiguring tree T into another tree T\' only if the preorder and postorder traversals of both are the same. She thus wonders, given a particular permutation of nodes P1 and another permutation of nodes P2, along with the value of K, how many rooted K-ary trees T are there that the preorder traversal of T is P1, and the postorder traversal of T is P2.\n\n\nWe give the explicit pseudocode of the preorder and postorder traversals of rooted K-ary trees:\n\nclass node\n\tint label;\n\tnode children[K];\n//children[i] is "null" if the i\'th child is not present\n\nvoid preorder(node subroot)\n\toutput subroot.label;\n\tfor(int i = 0; i < K; i++)\n\t\tif(subroot.children[i] != null)\n\t\t\tpreorder(subroot.children[i]);\n\nvoid postorder(node subroot)\n\tfor(int i = 0; i < K; i++)\n\t\tif(subroot.children[i] != null)\n\t\t\tpostorder(subroot.children[i]);\n\toutput subroot.label;\n\n\n\nTwo rooted K-ary trees T1 and T2 are considered different if there is some node n, such that the children[] array of node n is different in T1 and in T2.\n\nSome examples of differences:\nK=2.\n\n   1 : (1.children = [2, 3])\n  / \\\n 2   3\n\nis different from\n\n   1 : (1.children = [3, 2])\n  / \\\n 3   2\n\n\nAlso,\nK=2.\n\n   1 : (1.children = [null, 2])\n    \\\n     2\n\nis different from\n\n   1 : (1.children = [2, null])\n  /\n 2\n\nis different from\n\n   2\n    \\\n     1 : (1.children = [null, null], 2.children = [null, 1])\n\n\nInput\n\nThe first line contains T, the number of test-cases. \nEach test-case, begins with a line consisting of two integers N and K, N is the number of nodes of the tree, and K is the maximum number of children of each node. \nThis is followed by a line containing a permutation of 1 to N, the supposed preorder traversal. \nThis is followed by another line containing a permutation of 1 to N, the supposed postorder traversal.\n\nOutput\n\nFor each testcase, output the possible number of rooted K-ary trees having the first permutation as its preorder traversal and the second permutation as its postorder traversal. Since the answer can be large, output the answer modulo 1000000007 (109 + 7).\n\nConstraints\n\n 1 \xe2\x89\xa4 T \xe2\x89\xa4 5 \n 2 \xe2\x89\xa4 N \xe2\x89\xa4 105 \n 1 \xe2\x89\xa4 K < N \n Both lines will contain permutations of 1 to N \n\nExample\nInput:\n4\n2 2\n1 2\n2 1\n4 2\n1 2 3 4\n2 3 4 1\n3 2\n2 1 3\n1 3 2\n4 3\n1 3 2 4\n2 1 3 4\n\nOutput:\n2\n0\n1\n0\nExplanation\n\nThe first case has two possibilities:\n\n  1\n /\n2\n\nand\n\n  1\n   \\\n    2\n\n\n\nThe second case gives us a tree where the root 1 has 2, 3 and 4 as its children. Since K = 2, this violates the condition that each node has atmost K children.\n\n\nThe fourth case is impossible for any tree to have the given preorder and postorder traversals.\n\n\n\n\nAuthor:\nprad_adm\n\n\nTester:\n5\xe2\x98\x85tuananh93\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/TRANSFIG\n\n\nTags:\n\n               \n                 Trees, Combinatorics, ad-hoc\n                 \n                     \n                     Data Structures, Graphs, Mathematics, Algorithms, Constructive\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2714\n\n\nDate Added:\n7-06-2013\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'