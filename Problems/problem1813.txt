b'\nYou are given a tree with $N$ nodes, numbered from $1$ to $N$. It is  rooted at node $1$.\nWe call the simple path between node $A$ and node $B$ to be vertical if node $A$ lies on the path from the root to $B$ or node $B$ lies on the path from the root to $A$. In other words, LCA ($A,B$) must be $A$ or $B$.  And in such cases, we define a node $A$ to lie above node $B$ in the tree if distance to $A$ from the root is less than the distance from the root to $B$. Otherwise we define it to lie below $B$.\nYou also have with you $1$ Proton and $E$ Electrons (together called as particles) .  And you need to place these in some nodes of the tree.\nSuppose we fix the proton to be at some node $A$. We then call a placement of electrons valid if the following conditions are met  :-\n\nEach node can have at most one particle in it. Also, every particle should be placed in some node.\nElectrons can only be placed in nodes from which the simple path to $A$ is vertical (that is, they should either be above $A$, or below $A$).\nAt least $X_A$ nodes above $A$ should contain an electron and at least $Y_A$ nodes below $A$ should contain an electron. \n\nThe Dipole moment for a valid placement of electrons is calculated as follows :- \n\nConsider the sum of distances from $A$ to nodes which contain an electron and lie above $A$. Let this sum be $S_1$.\nSimilarly, consider the sum of distances from $A$ to nodes which contain an electron and lie below $A$. Let this sum be $S_2$.\nThe Dipole Moment is then defined as |$S_1-S_2+Z_A$|, here $Z_A$ is the positive charge if the proton is placed at $A$. Here, |$X$| refers to the absolute value of $X$.\n\nFor every $A$ ($1 \\leq A \\leq N$) print the minimum dipole moment you can achieve among all valid placement in which the node $A$ contains the proton. \nIn case there is no valid placement for a particular node $A$, print $-1$ for that.\nNote that the distance between two nodes is the number of edges in the simple path between them.\nInput:\n\nThe first line contains a single integer, $T$, which denotes the number of testcases.\nThe first line of each testcase will contain two integers, $N$ and $E$, which denote the number of nodes and number of electrons respectively. \nThe next $N-1$ lines contain two integers $u$ and $v$ denoting that there\xe2\x80\x99s an edge between $u$ and $v$ in the tree.\nThe i-th of the next $N$ lines contain 3 space separated integers ,  $X_i,Y_i,Z_i$ \n\nOutput:\n\nOutput $T$ lines, where each line should be containing $N$ space-separated integers, the $A^{th}$ integer should be the minimum dipole moment if the proton is placed at node $A$ , or -1 if there is no valid placement. \n\nConstraints\n\n$1 \\leq T \\leq 5$\n$2 \\leq N \\leq 2*10^5$\n$1 \\leq u,v \\leq N$\nSum of $N$ over all testcases $\\leq 4*10^5$\n$1 \\leq E \\leq N-1$\n$ 0 \\leq |Z_i|  \\leq 10^6$\n$ 0 \\leq X_i,Y_i  <  N$\n$ 0 \\leq X_i+Y_i  \\leq  E$\n$X_A \\leq $ number of nodes above  $A$, for all $A$. \n$Y_A \\leq $ number of nodes below $A$, for all $A$. \n\nSubtasks\n\n15 points : sum of $N$ over all testcases $ \\leq 300$\n25 points : sum of $N$ over all testcases $ \\leq 3000$\n60 points : Original Constraints. \n\nSample Input:\n1\n13 2\n1 2\n2 3\n2 4\n2 5\n4 6\n4 7\n1 8\n8 9\n8 10\n8 12\n10 11\n1 13\n0 1 5\n0 0 0\n1 0 4\n2 0 -3\n1 0 -8\n2 0 -6\n2 0 3\n0 2 0\n1 0 -4\n2 0 7\n0 0 2\n0 0 10\n1 0 -2\n\nSample Output:\n0 0 7 0 5 1 6 2 1 10 5 13 -1\n\nExplanation:\nWith the proton fixed at node $1$, we can achieve a dipole moment of $0$ by placing the electrons at nodes $2$ and $12$ for instance.\n\n\n\nAuthor:\n4\xe2\x98\x85shashwatchandr\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/EXUNF\n\n\nTags:\n\n               \n                 Trees, Persistent Segment Trees, Segment Trees, DFS, Binary Search\n                 \n                     \n                     Data Structures, Graphs, Advanced Data Structures, Persistent Structures, Advanced Tree Structures, Algorithms, Graph Algos, Traversals, Searching\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3343\n\n\nDate Added:\n25-09-2019\n\n\nTime Limit:\n2.5 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'