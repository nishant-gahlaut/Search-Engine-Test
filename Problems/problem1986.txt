b'\n Read problems statements in Mandarin Chinese  and Russian.\nChef has an array. The size of the array is equal to N.\nChef wants to make M queries. Each query has one of the two types:\n\n1 l r - Calculate some interesting function F for subarray indexed from l to r inclusive.\n2 l r - Modify the given array by removing all elements having indices in range from l to r and then putting these numbers at the beginning of\narray. Order of all other elements remains same.\n\n\nFor example: you have array [1, 2, 3, 4, 5, 6, 7, 8] and query (2 4 6), the modified array after the operation will look like [4, 5, 6, 1, 2, 3, 7, 8].\nAll queries that goes after this query have to be executed at new the array. \nNow let us define the interesting function F :). \nLets call this array B. Let |B| be the length of array B. Assume that B is having 1 based indexing.\nThen the function F can be calculated by following code.\n\n\nX = 1;\nfor (i = 2; i <= |B|; i++)\n    if (B[i] != B[i - 1])\n        X++;\nX is the output of the function F(B).\n\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of the elements in given array.\nNext line contains N numbers denoting the elements of given array.\nThird line contains a single integer M denoting the number of queries that Chef wants to execute.\nEach of the next M lines describes a single query in the format given in the statement.\nOutput\nFor each query of the first type output a single line containing a single integer - the answer for this query.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 3\n1 \xe2\x89\xa4 Ai \xe2\x89\xa4 109\n1 \xe2\x89\xa4 l \xe2\x89\xa4 r \xe2\x89\xa4 N\nSubtask 1 (15 points): 1 \xe2\x89\xa4 N \xe2\x89\xa4 100, 1 \xe2\x89\xa4 M \xe2\x89\xa4 1000\nSubtask 2 (25 points): 1 \xe2\x89\xa4 N, M \xe2\x89\xa4 105, there is no query with type 2\nSubtask 3 (60 points): 1 \xe2\x89\xa4 N, M \xe2\x89\xa4 105\n\nExample\nInput:\n1\n5\n1 1 2 1 3\n5\n1 1 5\n1 2 4\n2 2 3\n1 1 5\n2 3 3\n\nOutput:\n4\n3\n4\n\n\n\n\nAuthor:\nfurko_adm\n\n\nTester:\n6\xe2\x98\x85stzgd\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CHEFC\n\n\nTags:\n\n               \n                 Square Root Decomposition\n                 \n                     \n                     Advanced Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2778\n\n\nDate Added:\n17-09-2014\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'