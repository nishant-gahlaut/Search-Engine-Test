b"\nIn a market of mangoes, there are NN sellers numbered from 11 to NN. The ii-th seller initially charges a price of AiAi coins for each of their mangoes. However, the sellers are very competitive, and they will change prices based on other sellers nearby.\nYou have a simple graph (unweighted, undirected graph containing no self-loops or multiple edges) GG with NN vertices and MM edges. There is an edge between two sellers if and only if they are neighbours. When you buy a mango from a seller numbered XX, the following occurs:\n\nSeller XX keeps his price the same.\nEvery seller YY who is a neighbour of XX increases their price by 11, that is, AY=AY+1AY=AY+1 for every YY who is a neighbour of XX.\nEvery other seller ZZ who is not a neighbour of XX decreases their price by 11; that is, AZ=AZ\xe2\x88\x921AZ=AZ\xe2\x88\x921 for every ZZ who is not a neighbour of XX.\n\nPrices can become zero or negative during this process.\nNow you should process QQ queries of the following three types:\n\n++ uu vv \xe2\x80\x94 Add an edge between nodes uu and vv in the graph. It's guaranteed there is no edge between uu and vv currently.\n-- uu vv \xe2\x80\x94 Remove an edge between nodes uu and vv in the graph. It's guaranteed there is an edge between uu and vv currently.\n?? \xe2\x80\x94 Find the minimum amount of money you need to pay so that you can buy exactly one mango from every seller. After queries of this type, the prices of all sellers are reset to their initial value.\n\nInput Format\n\nThe first line contains two integers NN and MM - the number of sellers and the number of edges in the graph.\nThe second line contains NN space-separated integers A1,A2,\xe2\x80\xa6,ANA1,A2,\xe2\x80\xa6,AN denoting the price array AA.\nThe next MM lines each contain two integers uu and vv (1\xe2\x89\xa4u,v\xe2\x89\xa4N1\xe2\x89\xa4u,v\xe2\x89\xa4N, u\xe2\x89\xa0vu\xe2\x89\xa0v), representing an edge of GG. \nThe next line contains the integer QQ \xe2\x80\x94 the number of queries. \nThe next QQ lines contain the queries. Each query is in the format given in the problem statement.\nThere is at least one query of type ??.\n\nOutput Format\nFor each query of type ??, output one integer \xe2\x80\x94 the minimum amount of money you need to pay so that you can buy exactly one mango from each seller.\nConstraints\n\n1\xe2\x89\xa4N,Q\xe2\x89\xa41051\xe2\x89\xa4N,Q\xe2\x89\xa4105\n1\xe2\x89\xa4M\xe2\x89\xa4min((N2),105)1\xe2\x89\xa4M\xe2\x89\xa4min((N2),105)\n1\xe2\x89\xa4Ai\xe2\x89\xa41091\xe2\x89\xa4Ai\xe2\x89\xa4109\nIt's guaranteed that GG is a simple graph, that is, it is an unweighted, undirected graph containing no self-loops or multiple edges.\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n4 3\n8 9 6 10\n2 1\n1 3\n3 4\n6\n?\n+ 2 3\n+ 4 2\n- 3 1\n+ 1 4\n?\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n33\n37\n\n\nExplanation\nIn the sample test, the first query of type ?? is pictured below. The ii-th node (from left to right) contains the price of the ii-th seller. If we buy mangoes from the sellers 11, 44, 33, 22, in that order, then we can pay 88, 99, 88, and 88 coins for the mangoes, respectively, paying a total 3333 coins. It can be proven that this is indeed the minimum amount possible.\n\n\nIt can be proven that for the second query of type ??, the minimum amount we can pay is 3737 coins. Note that the prices of the mangoes reset after each query of type ??.\n\n\n\nAuthor:\n3\xe2\x98\x85flamestorm153\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MANGOMKT\n\n\nTags:\n\n               \n                 cook138, easy, flamestorm153, graphs, observation\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2393\n\n\nDate Added:\n20-02-2022\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"