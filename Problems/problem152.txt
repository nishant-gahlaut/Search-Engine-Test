b"\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nAn encoder encodes the first 1616 lowercase English letters using 44 bits each. The first bit (from the left) of the code is 00 if the letter lies among the first 88 letters, else it is 11, signifying that it lies among the last 88 letters. The second bit of the code is 00 if the letter lies among the first 44 letters of those 88 letters found in the previous step, else it's 11, signifying that it lies among the last 44 letters of those 88 letters. Similarly, the third and the fourth bit each signify the half in which the letter lies. \nFor example, the letter jj would be encoded as :\n\nAmong (a,b,c,d,e,f,g,h(a,b,c,d,e,f,g,h || i,j,k,l,m,n,o,p)i,j,k,l,m,n,o,p), jj appears in the second half. So the first bit of its encoding is 11.\nNow, among (i,j,k,l(i,j,k,l || m,n,o,p)m,n,o,p), jj appears in the first half. So the second bit of its encoding is 00.\nNow, among (i,j(i,j || k,l)k,l), jj appears in the first half. So the third bit of its encoding is 00.\nNow, among (i(i || j)j), jj appears in the second half. So the fourth and last bit of its encoding is 11.\n\nSo jj's encoding is 10011001,\nGiven a binary encoded string SS, of length at most 105105, decode the string. That is, the first 4 bits are the encoding of the first letter of the secret message, the next 4 bits encode the second letter, and so on. It is guaranteed that the string's length is a multiple of 4.\nInput:\n\nThe first line of the input contains an integer TT, denoting the number of test cases.\nThe first line of each test case contains an integer NN, the length of the encoded string.\nThe second line of each test case contains the encoded string SS.\n\nOutput:\nFor each test case, print the decoded string, in a separate line.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa4101\xe2\x89\xa4T\xe2\x89\xa410\n4\xe2\x89\xa4N\xe2\x89\xa41054\xe2\x89\xa4N\xe2\x89\xa4105\nThe length of the encoded string is a multiple of 44.\n0\xe2\x89\xa4Si\xe2\x89\xa410\xe2\x89\xa4Si\xe2\x89\xa41\n\nSubtasks\n\n100100 points : Original constraints.\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n4\n0000\n8\n00001111\n4\n1001\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\na\nap\nj\n\n\nExplanation\n\nSample Case 11 : \n\nThe first bit is 00, so the letter lies among the first 88 letters, i.e., among a,b,c,d,e,f,g,ha,b,c,d,e,f,g,h. The second bit is 00, so it lies among the first four of these, i.e., among a,b,c,da,b,c,d. \nThe third bit is 00, so it again lies in the first half, i.e., it's either aa or bb. Finally, the fourth bit is also 00, so we know that the letter is aa.\n\nSample Case 22 : \n\nEach four bits correspond to a character. Just like in sample case 11, 00000000 is equivalent to aa. Similarly, 11111111 is equivalent to pp. So, the decoded string is apap.\n\nSample Case 33 : \n\nThe first bit is 11, so the letter lies among the last 88 letters, i.e., among i,j,k,l,m,n,o,pi,j,k,l,m,n,o,p. The second bit is 00, so it lies among the first four of these, i.e., among i,j,k,li,j,k,l. \nThe third bit is 00, so it again lies in the first half, i.e., it's either ii or jj. Finally, the fourth bit is 11, so we know that the letter is jj.\n\n\n\nAuthor:\ndaanish_adm\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/DECODEIT\n\n\nTags:\n\n               \n                 Maps, Basic Maths, Binary, Observation, Brute Force, Implementation\n                 \n                     \n                     Data Structures, Mathematics, Number System, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n31-12-2020\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"