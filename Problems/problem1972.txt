b"\nRead problems statements in mandarin chinese, russian and vietnamese as well.\nChef is helping out at a volunteering center for teaching. A child comes to Chef with a problem that he is not able to solve and asks Chef for his help. The problem is the following:   \n Consider an M \xc3\x97 N grid graph. The vertices in the grid graph are identified by its row and column number, i.e., for a vertex there are two numbers (i,j) associated with it, where 1 \xe2\x89\xa4 i \xe2\x89\xa4 M is its row, and 1 \xe2\x89\xa4 j \xe2\x89\xa4 N is its column. There are two types of edges in a grid graph(note that all edges are bidirectional) :\n\nWhen i < M, there is an edge of weight down(i, j) connecting (i, j) and (i+1, j);\nWhen j < N, there is an edge of weight right(i, j) connecting (i, j) and (i, j+1).\n\n\n\tInitially, every vertex has a weight of zero.\n\n\tDefine the length of a path to be the sum of weights of all the edges in this path. The shortest path between (i1, j1) and (i2, j2) is the path with the minimum length. Of course, the weights associated with vertices doesn't influence shortest paths at all.\n\nThe task in the problem is to process the following 2 types of queries on this graph efficiently :\n\ni1 j1 i2 j2 c : add c to the weights of all vertices in the shortest path between (i1, j1) and (i2, j2).\ni j : return the weight of vertex (i, j).\n\nChef is confused with the problem but he wants to help the child. Can you help Chef with this problem?\nInput\n\nThe first line contains three integers M, N, Q. M and N denotes the graph's size; Q denotes the number of queries.\nNext M - 1 lines, each line contains N numbers. The j-th number in the i-th line in this part(i.e., the (i + 1)-th line in total) denotes down(i, j).\nNext M lines, each line contains N - 1 numbers. The j-th number in the i-th line in this part(i.e., the (i + M)-th line in total) denotes right(i, j).\nNext Q lines, each line contains 3 or 6 numbers, denoting a query.\nOutput\nFor each query of type 2, output the weight of required vertex.\nConstraints\n\n1 \xe2\x89\xa4 M \xe2\x89\xa4 3\n1 \xe2\x89\xa4 N \xe2\x89\xa4 105\n1 \xe2\x89\xa4 Q \xe2\x89\xa4 105\n1 \xe2\x89\xa4 down(i,j), right(i,j) \xe2\x89\xa4 1012\nIn type 1 query :\n\t\t\n1 \xe2\x89\xa4 i1, i2 \xe2\x89\xa4 M\n1 \xe2\x89\xa4 j1, j2 \xe2\x89\xa4 N\n1 \xe2\x89\xa4 c \xe2\x89\xa4 1013\nThe shortest path between (i1, j1) and (i2, j2) is unique.\n\n\nIn type 2 query :\n\t\t\n1 \xe2\x89\xa4 i \xe2\x89\xa4 M\n1 \xe2\x89\xa4 j \xe2\x89\xa4 N\n\n\n\nSubtasks\n\nSubtask #1 (6 points): N, Q \xe2\x89\xa4 103\nSubtask #2: (11 points): M = 1.\nSubtask #3: (30 points): M = 2.\nSubtask #4: (24 points): \t\n\t\t\ndown(i,j) and right(i,j) are uniformly randomly generated from [1,3 \xc3\x97 1010].\nQueries are also randomly generated.\nThere is only one test file for this subtask.\n\n\nSubtask #5: (29 points):: Original Constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3 3 11\n1 1 5\n2 10 6\n1 4\n1 13\n6 5\n1 2 2 3 3 1\n1 2 2 1 3 2\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n2 2 2\n2 2 3\n2 3 1\n2 3 2\n2 3 3\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n0\n2\n2\n1\n3\n0\n1\n1\n1\n\n\n\n\n\nAuthor:\n7\xe2\x98\x85r_64\n\n\nTester:\njingbo_adm\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/QGRID\n\n\nTags:\n\n               \n                 Segment Trees, HLD, Divide and Conquer, Minimum Spanning Trees\n                 \n                     \n                     Advanced Data Structures, Advanced Tree Structures, Advanced Algorithms, Advanced Graph Algos, Algorithms, Recursion, Graph Algos, Tree Algos\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3049\n\n\nDate Added:\n6-08-2017\n\n\nTime Limit:\n7 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"