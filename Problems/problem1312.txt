b'\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given $K$ permutations of integers $1$ through $N$. For each $i$ ($1 \\le i \\le K$), the $i$-th permutation is denoted by $A_{i,1}, A_{i,2}, \\ldots, A_{i,N}$.\nConstruct a directed acyclic graph with $N$ nodes (numbered $1$ through $N$) such that:\n\nEach of the given permutations is a valid topological sort of the graph. Formally, for each valid $k$ and each $i, j$ ($1 \\le i \\lt j \\le N$), there is no edge from the node $A_{k,j}$ to the node $A_{k,i}$.\nThe outdegree of each node is at most $1$.\nThe number of nodes with indegree $0$ is the smallest possible.\n\nIf there are multiple solutions, you may find any one.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\n$K$ lines follow. For each $i$ ($1 \\le i \\le K$), the $i$-th of these lines contains $N$ space-separated integers $A_{i,1}, A_{i,2}, \\ldots, A_{i,N}$.\n\nOutput\nFor each test case, print two lines.\n\nThe first of these lines should contain one integer \xe2\x80\x95 the minimum number of nodes with indegree $0$.\nThe second line should contain $N$ space-separated integers $v_1, v_2, \\ldots, v_N$ describing your graph in the following way: for each valid $i$, if $v_i = 0$, there is no outgoing edge from the $i$-th node; otherwise, there is an edge from the $i$-th node to the $v_i$-th node.\n\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 500$\n$1 \\le K \\le 100$\n$1 \\le A_{i,j} \\le N$ for each valid $i,j$\nthe sum of $N$ over all test cases does not exceed $2,000$\n\nSubtasks\nSubtask #1 (20 points):\n\n$N \\le 20$\n$K \\le 10$\n\nSubtask #2 (80 points): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n2\n2 2\n1 2\n2 1\n2 2\n1 2\n1 2\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n2\n0 0\n1\n2 0\n\n\nExplanation\nExample case 1: The graph must consist of just two disconnected nodes, since no edges are allowed. Hence, there are two nodes with indegree $0$.\nExample case 2: The graph may contain an edge from node $1$ to node $2$. Then, there is only one node with indegree $0$.\n\n\n\nAuthor:\n7\xe2\x98\x85rahuldugar\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CHEFDAG\n\n\nTags:\n\n               \n                 Graphs, Maximum Bipartite Matching\n                 \n                     \n                     Data Structures, Advanced Algorithms, Advanced Graph Algos, Flow Networks\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2522\n\n\nDate Added:\n30-05-2019\n\n\nTime Limit:\n2 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'