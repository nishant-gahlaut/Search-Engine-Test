b'\n Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:\n\nAdd some value to ith element of the array\nCalculate sum of all elements on any prefix of the array\n\n\nBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.\nGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here "&" denotes bitwise AND operation.\nSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.\nSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.\nOutput\nFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 300\n1 \xe2\x89\xa4 Length(Li) \xe2\x89\xa4 1000\n1 \xe2\x89\xa4 N \xe2\x89\xa4 106\n\nSubtasks\n\nSubtask #1 (20 points): |L1| + |L2| * N + |L3| \xe2\x89\xa4 60\nSubtask #2 (30 points): 1 \xe2\x89\xa4 T \xe2\x89\xa4 30, 1 \xe2\x89\xa4 N \xe2\x89\xa4 100\nSubtask #3 (50 points): No additional constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n4\n001 100 011 4\n1000 1101 100 3\n1010 001 101 4\n010 101 000 4\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n6\n12\n8\n10\n\n\n\n\n\nAuthor:\n6\xe2\x98\x85cenadar\n\n\nTester:\n7\xe2\x98\x85alex_2oo8\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/FENWITER\n\n\nTags:\n\n               \n                 bit-manipulation, cenadar, easy, oct16\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n1820\n\n\nDate Added:\n16-07-2015\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'