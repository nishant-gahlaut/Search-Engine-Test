b"\nThere is an array A with N elements. Each element of A has a fixed polarity: either north or south. \nChef is allowed to perform some (possibly zero) operations on the array A. In one operation, Chef can:\n\nPick some subarray of array A, such that, the first and last elements of the subarray have different polarities, and, rearrange the elements in this subarray any way he wants. \n\nNote that the polarity of each element remains unchanged after an operation.\nFind the minimum number of operations required to sort the array in non-decreasing order, or state that it is impossible.\nA subarray of A is obtained by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\nInput Format\n\nThe first line contains an integer T, denoting the number of test cases. The T test cases then follow.\nThe first line of each test case contains a single integer N.\nThe second line of each test case contains N space-separated integers A1,A2,\xe2\x80\xa6,AN.\nThe third line of each test case contains a string of length N, the ith character of which is either N or S, representing that the ith element of A has north or south polarity, respectively.\n\nOutput Format\nFor each test case, if it impossible to sort the array, output \xe2\x88\x921. Otherwise, output a single integer: the minimum number of operations required to sort the array.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa4105\n1\xe2\x89\xa4N\xe2\x89\xa42\xe2\x8b\x85105\n1\xe2\x89\xa4Ai\xe2\x89\xa4109\nThe sum of N across all test cases doesn't exceed 2\xe2\x8b\x85105.\n\nSubtasks\nSubtask #1 (100 points): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n6\n5\n1 3 2 3 7\nNNSNS\n2\n2 1\nSS\n3\n1 8 12\nSNS\n3\n3 2 1\nNSN\n5\n1 2 3 5 4\nNSNSN\n5\n1 1 2 2 1\nSNSNN\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n1\n-1\n0\n2\n1\n1\n\n\nExplanation\nLet's represent elements with a polarity of north in red, and elements with a polarity of south in blue. The polarity of each element is also labelled above it.\n\nIn the first test case, we can sort the array in a single operation as follows.\n\nRearrange the subarray [A1,A2,A3]: [N1,N3,S2,N3,S7]\xe2\x86\x92[N1,S2,N3,N3,S7].\nIn the second test case, the array [S2,S1] cannot be sorted, since no operations can be performed.\nIn the third test case, the array is already sorted, so the answer is 0.\nIn the fourth test case, we can sort the array in two operations as follows.\n\nRearrange the subarray [A2,A3]: [N3,S2,N1]\xe2\x86\x92[N3,N1,S2].\nRearrange the subarray [A1,A2,A3]: [N3,N1,S2]\xe2\x86\x92[N1,S2,N3].\n\n\n\n\nAuthor:\n3\xe2\x98\x85flamestorm153\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MAGNETSORT\n\n\nTags:\n\n               \n                 easy, flamestorm153, ltime105, observation\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n1804\n\n\nDate Added:\n28-02-2022\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"