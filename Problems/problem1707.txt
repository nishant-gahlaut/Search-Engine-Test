b'\n"Medians can\'t be very mean!", retorted Chef\'s brother. One would wish Chef\'s ego wouldn\'t\n\tcome in the way, but Chef has taken up the challenge to prove otherwise. He asks for your help. Given N numbers, select\n\tK out of them, such that, the absolute difference between the mean and the median of the selected numbers, is as low\n\tas possible.\nMean of K numbers is defined as the sum of the numbers divided by K.\nMedian of K numbers is defined as the number that appears at the order index, floor((K+1)/2);\n\tthat is, the I\'th element in the sorted order of the K numbers (where numbering starts from 1),\n\twhere I = floor((K+1)/2). Note that, if K is even, the median would be the smaller value among the two values that\n\tlie in the center.\nInput format\nThe first line contains the number T, the number of test cases. In the following lines,\n\tT test cases follow (without any newlines between them.)\nEach case consists of only 2 lines.\nThe first line of each test case contains N and K, separated by a single space.\nThe second line contains N positive integers, separated by a single space.\nOutput format\nFor each test case, print the minimum absolute difference between the mean and the median\n\tthat you can get, by selecting any K numbers, from the N numbers. Output the result rounded to 3 digits of precision\n\tafter the decimal.\nConstraints\n1 \xe2\x89\xa4 T \xe2\x89\xa4 20\n1 \xe2\x89\xa4 N \xe2\x89\xa4 60\n1 \xe2\x89\xa4 K \xe2\x89\xa4 N\n1 \xe2\x89\xa4 numbers \xe2\x89\xa4 1200\nSample input\n2\n8 2\n4 9 1 3 5 9 4 10\n5 4\n10 7 4 5 9\n\n\nSample output\n0.000\n0.500\n\n\nExplanation\nIn the first case, you can select [4, 4].\nIn the second case, you can select [10, 7, 4, 9]. The mean would be 7.500, where as\n\tmedian would be 7.\n\n\n\nAuthor:\n2\xe2\x98\x85shilp_adm\n\n\nTester:\n6\xe2\x98\x85anton_lunyov\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/MEANMEDI\n\n\nTags:\n\n               \n                 0-1 Knapsack\n                 \n                     \n                     Algorithms, Dynamic Programming, Knapsack\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2719\n\n\nDate Added:\n14-07-2011\n\n\nTime Limit:\n0.492585 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'