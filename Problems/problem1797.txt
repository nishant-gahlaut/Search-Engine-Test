b"\nAfter Danish's death, Faizal wants to take revenge against Ramadhir. However, he has run out of funds to buy new weapons and must somehow procure a large amount money to fund his revenge and buy guns. \nHe decides to rob the Bank of Wasseypur to get the funds. He has a friend who works as a security guard at the bank, from whom he learned the secret of the bank's safe.\nThe manager of the bank is a big fan of puzzles and is currently fascinated with bits. The manager takes a number and writes it out in binary format with KK bits. He then rearranges the bits of the number however he likes. Recently, he has also started experimenting with the bitwise XOR operation. This led him to come up with the following way of setting the code of the bank's safe:\nEach day he takes two numbers L and R. He then considers all the numbers between L and R, both endpoints included. The safe's code is set as the number of ways he can rearrange the bits in these numbers such that the bitwise XOR of all the resulting numbers is maximum. Since the safe code can only have upto 10 digits, he divides the this number by 109+7 and uses the remainder as the code.\nAfter some bribery, the guard has also given Faizal a list of L, R and K, that the manager could have used to make the secret code. Can you help Faizal get the secret code for all of them?\nInput Format\n\nThe first line contains a single integer T, denoting the size of the list the guard gave Faizal.\nEach of the next T lines contains three space-separated integers L,R, and K.\n\nOutput Format\nFor each testcase, output in a single line the bank safe code modulo 109+7.\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa45\n2\xe2\x89\xa4K\xe2\x89\xa430\n2\xe2\x89\xa4L<R<2K\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n2 3 3\n3 5 3\n5 7 3\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n3\n6\n3\n\n\nExplanation\nTest Case 1\n\nL=2, R=3, K=3. \nNumbers between L and R are {2,3}. \nIn binary, numbers are  {010,011} \nMaximum possible XOR is 111\nWe can rearrange the bits in these numbers to achieve maximum XOR as \n{100,011}\n{010,101}\n{001,110}\n\n\xc2\xa0\nTest Case 2\n\nL=3, R=5, K=3. \nNumbers between L and R are {3,4,5}. \nIn binary, numbers are  {011,100,101} \nMaximum possible XOR is 111\nWe can rearrange the bits in these numbers to achieve maximum XOR as \n{011,001,101}\n{011,010,110}\n{101,001,011}\n{101,100,110}\n{110,010,011}\n{110,100,101}\n\n\xc2\xa0\nTest Case 3\n\nL=5, R=7, K=3. \nNumbers between L and R are {5,6,7}. \nIn binary, numbers are  {101,110,111} \nMaximum possible XOR is 111\nWe can rearrange the bits in these numbers to achieve maximum XOR as \n{110,110,111}\n{101,101,111}\n{011,011,111}\n\n\n\n\nAuthor:\n6\xe2\x98\x85phantom654\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/BOWSAFE\n\n\nTags:\n\n               \n                 Bit Manipulation, Combinatorics, Matrix Exponentiation, Dynamic Programming\n                 \n                     \n                     Mathematics, Matrices, Matrix Multiplication, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3156\n\n\nDate Added:\n25-09-2021\n\n\nTime Limit:\n3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"