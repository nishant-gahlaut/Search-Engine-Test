b"\nAn optimist believes in the optimal usage of all options available.\nChef gives you a sequence A1,A2,\xe2\x80\xa6,ANA1,A2,\xe2\x80\xa6,AN consisting of integers. You can perform the following operation on the sequence any number of times (possibly 0):\n\nSelect any continuous segment Al\xe2\x80\xa6r and sort the segment in non-descending order, while keeping other elements unchanged. The cost to perform this operation is max(Al\xe2\x80\xa6r)\xe2\x88\x92min(Al\xe2\x80\xa6r). \n\nFor example, if the sequence A=[3,4,1,5,1,9], then applying the operation on A2\xe2\x80\xa65 yields the sequence [3,1,1,4,5,9]. The cost to perform this operation is 5\xe2\x88\x921=4 .\nYou have to determine the minimum total cost of operations so that the sequence A becomes sorted in non-descending order, which means for all 2\xe2\x89\xa4i\xe2\x89\xa4N, the condition Ai\xe2\x88\x921\xe2\x89\xa4Ai is satisfied.\nInput Format\n\nThe first line of the input contains a single integer T - the number of test cases. The test cases then follow.\nThe first line of each test case contains a single integer N.\nThe second line of each test case contains N space-separated integers A1,A2,\xe2\x80\xa6,AN.\n\nOutput Format\n\nFor each test case, print the minimum total cost of operations so that the sequence A becomes sorted in non-descending order.\n\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa4105\n1\xe2\x89\xa4N\xe2\x89\xa4105\n1\xe2\x89\xa4Ai\xe2\x89\xa4109\nSum of N over all test cases does not exceed 2\xe2\x8b\x85105\n\nSubtasks\n\nSubtask 1 (20 points): N\xe2\x89\xa41000; \xce\xa3N\xe2\x89\xa42000\nSubtask 2 (40 points): A is a permutation from 1 to N\nSubtask 3 (40 points): Original constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n4\n1 3 6 7\n3\n10 1 4\n6\n3 1 3 3 4 3\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n0\n9\n3\n\n\nExplanation\n\nTest case 1: The sequence is already sorted in non-descending order. So, we require 0 operations and thus 0 total cost.\nTest case 2: We can apply the operation on A1\xe2\x80\xa63 which converts A into [1,4,10] which is sorted in non-descending order.\nSo, the total cost is 10\xe2\x88\x921=9. It can be shown that we can't sort A with less than 9 total cost.\nTest Case 3: First, we can apply the operation on A1\xe2\x80\xa64 which converts A into [1,3,3,3,4,3].\nThen, apply the operation on A3\xe2\x80\xa66 which converts A into [1,3,3,3,3,4] which is sorted in non-descending order.\nSo, the total cost is 3\xe2\x88\x921+4\xe2\x88\x923=3. It can be shown that we can't sort A with less than 3 total cost.\n\n\n\n\nAuthor:\n5\xe2\x98\x85akshitm16\n\n\nTester:\n6\xe2\x98\x85iceknight1093\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/OPTSORT\n\n\nTags:\n\n               \n                 1D Arrays, Sets, Maps, Hashmaps, Sorting\n                 \n                     \n                     Data Structures, Arrays, Algorithms\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2045\n\n\nDate Added:\n21-12-2021\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"