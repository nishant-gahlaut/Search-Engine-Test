b"\nChef feels pretty greedy today. As you know Chef lives in ChefLand. It consists of N cities, connected by M one-directional roads. There are plenty of festivals in ChefLand and Chef does not want to miss any of them. So he has invented an efficient (as he thinks) algorithm of finding the shortest paths between cities. To get from city S to city T then he uses following method:\n\nThe trip starts at city S\n\nIf Chef reaches city T then the algorithm stops\n\nInitially only city S is visited and others are not\n\nChef chooses the shortest road from the current city that leads him to any unvisited city; if there are multiple shortest roads connected to unvisited cities then Chef can choose any of them; if all neighbour cities are visited then the algorithm stops\n\nChef goes along chosen road and algorithm returns to the previous step\n\n\nIf in the end of the algorithm Chef is in the City T then he assumes this path to be the shortest, otherwise Chef believes that it is impossible to get from city S to city T by current system of roads.\nYou want to check his greedy algorithm. To do this you need to find number of such different pairs of cities (U,V) that this algorithm can probably find the shortest path from city U to city V. Note that if it is impossible to reach city V from U and Chef's algorithm can conclude the same that this pair of cities is also counted to the answer. Have a look at the example for better understanding.\nInput:\nThe first line contains the number of cities N, the number of roads.  Then M lines follow with description of roads. Each road is described by three integers u, v and w, it means that there is a road from city u to city v of length w.\nOutput:\nOutput should contain a single integer on the first line - answer for the problem.\nConstraints:\n1 \xe2\x89\xa4 N \xe2\x89\xa4 2000\n1 \xe2\x89\xa4 M \xe2\x89\xa4 10000\n1 \xe2\x89\xa4 u,v \xe2\x89\xa4 N\n1 \xe2\x89\xa4 w \xe2\x89\xa4 10000\n\nExample:\nInput #1:\n2 0\n\nOutput #1:\n4\n\n\nInput#2:\n3 3\n1 2 1\n1 3 2\n2 3 2\n\nOutput#2:\n8\n\nExplanation:\nFor input#1 every possible pair is valid. for input#2 pair(1,3) is not valid, since Chef's algorithm will always go this way 1->2->3, while 1->3 is right way to get from 1 to 3. \nScoring:\nYou will be awarded 40 points for solving the problem correctly for 1 \xe2\x89\xa4 N, M  \xe2\x89\xa4 300.\nThe remaining 60 points will be awarded for solving the problem correctly for N, M  > 300.\n\n\n\nAuthor:\nroman_adm\n\n\nTester:\n3\xe2\x98\x85vamsi_kavala\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/GRTRIP\n\n\nTags:\n\n               \n                 Directed Graphs, Floyd Warshall's Algorithm, Dijkstra's Algorithm, DFS\n                 \n                     \n                     Data Structures, Graphs, Algorithms, Graph Algos, Shortest Paths, Traversals\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2637\n\n\nDate Added:\n16-06-2013\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n"