b'\n Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nBear Limak loves preparing problems for algorithmic contests.\nWhile his favorite part is inventing a story and writing the statement, he doesn\'t really like creating the test data.\nNot only it\'s hard to do, but also making a mistake may spoil a problem completely, likely making a problem easier.\nLimak prepared the following problem for you.\nYou start with an empty set of points on a two-dimensional plane.\nThere are N queries, each with one new point (xi, yi) to insert to the set.\nAfter each query you must find the diameter of the set, i.e. the maximum distance between two points in the set.\nTo avoid printing floating numbers, after each query print the square of the diameter.\nIn many problems, in test generators an author should create some (possibly smart and tricky) data, and then shuffle it before printing.\nLimak did the same in this problem, not noticing how crucial it may be.\nYou can assume that in every test the N points are randomly shuffled.\nIn other words, generators have a line "random_shuffle(array with points)" just before printing.\nIt isn\'t guaranteed that a problem is solvable within the time limit without this extra constraint.\nInput\nThe first line of the input contains an integer N denoting the number of points.\nThe i-th of N following lines contains two space separated integers xi and yi denoting coordinates of the i-th point to insert.\nOutput\nOutput N lines.\nThe i-th line should contain the square of the diameter of the set with points (x1, y1), ..., (xi, yi).\nConstraints\n\n2 \xe2\x89\xa4 N \xe2\x89\xa4 750,000\n-109 \xe2\x89\xa4 xi, yi \xe2\x89\xa4 109\nPoints are distinct.\nPoints are shuffled.\n\nSubtasks\n\nSubtask #1 (20 points) 2 \xe2\x89\xa4 N \xe2\x89\xa4 1000\nSubtask #2 (30 points) Points are generated uniformly at random.\nIn more detail: in each test file organizers chose two integers N and K,\nafter which a generator finds N distinct points with coordinates generated randomly from interval [-K, K].\nAll given original constraints are still satisfied.\nSubtask #3 (50 points) original constraints\n\n\n                        Sample Input 1\n                        \n\n\n\n\n\n5\n20 20\n40 30\n35 35\n0 10\n-170 1000000000\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n0\n500\n500\n2000\n999999980000029000\n\n\nExplanation\n\nAfter the first query, the set contains only one point (20, 20). You should print 0 because there are no two points with positive distance between them.\nAfter the second query, the set contains points (20, 20) and (40, 30).\nThe distance between them is sqrt((40-20)^2+(30-20)^2) = sqrt(500) so the squared distance is 500.\nAfter the third query, the set is {(20,20), (40,30), (35,35)}.\nThe maximum distance is sqrt(500).\nAfter the fourth query, the maximum distance is between (0,10) and (40,30).\nNote that the given points may be collinear.\nAfter the fifth query, the set contains all five points from the input.\nWatch out for overflows because the answer may be very big, as you can see here.\n\n\n\n\nAuthor:\n7\xe2\x98\x85errichto\n\n\nTester:\n7\xe2\x98\x85alex_2oo8\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/GEOCHEAT\n\n\nTags:\n\n               \n                 Randomized Algorithms, Convex Hull, Expected Value, Rotating Caliper\n                 \n                     \n                     Advanced Algorithms, Mathematics, Computational Geometry, Probability, Polygons\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n2968\n\n\nDate Added:\n6-10-2016\n\n\nTime Limit:\n2.5 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'